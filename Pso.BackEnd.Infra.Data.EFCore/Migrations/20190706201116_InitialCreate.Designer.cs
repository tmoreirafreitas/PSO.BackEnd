// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pso.BackEnd.Infra.Data.EFCore.Context;

namespace Pso.BackEnd.Infra.Data.EFCore.Migrations
{
    [DbContext(typeof(PsoDbContext))]
    [Migration("20190706201116_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClienteId");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(15);

                    b.Property<string>("Filiacao")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(150);

                    b.Property<bool?>("IsSPC");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("date");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(60);

                    b.Property<string>("Rg")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("PK_Cliente");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Contato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContatoId");

                    b.Property<long>("ClienteId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(15);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id")
                        .HasName("PK_Contato");

                    b.HasIndex("ClienteId");

                    b.ToTable("Contato");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnderecoId");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(40);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(30);

                    b.Property<long>("ClienteId");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(100);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_Endereco");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Fatura", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FaturaId");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("date");

                    b.Property<string>("FormaPagamento")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsPaga");

                    b.Property<int>("NumeroParcelas")
                        .HasColumnType("integer");

                    b.Property<long>("PedidoId");

                    b.Property<decimal>("Sinal")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("Total")
                        .HasColumnName("Total_A_Pagar")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id")
                        .HasName("PK_Fatura");

                    b.HasIndex("PedidoId")
                        .IsUnique();

                    b.ToTable("Fatura");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Lente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LenteId");

                    b.Property<float>("Cyl")
                        .HasColumnType("float");

                    b.Property<byte>("Eixo")
                        .HasColumnType("smallint");

                    b.Property<float>("Grau")
                        .HasColumnType("float");

                    b.Property<string>("LenteType")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2);

                    b.Property<long>("OculosId");

                    b.HasKey("Id")
                        .HasName("PK_Lente");

                    b.HasIndex("OculosId");

                    b.ToTable("Lente");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Oculos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OculosId");

                    b.Property<float>("ALT")
                        .HasColumnType("float");

                    b.Property<float>("Adicao")
                        .HasColumnType("float");

                    b.Property<string>("Cor")
                        .HasColumnType("varchar(30)");

                    b.Property<float>("DP")
                        .HasColumnType("float");

                    b.Property<long>("PedidoOculosId");

                    b.HasKey("Id")
                        .HasName("PK_Oculos");

                    b.ToTable("Oculos");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Parcela", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParcelaId");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("date");

                    b.Property<long>("FaturaId");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.Property<bool>("Recebido")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id")
                        .HasName("PK_Parcela");

                    b.HasIndex("FaturaId");

                    b.ToTable("Parcela");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Pedido", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PedidoId");

                    b.Property<long>("ClienteId");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("date");

                    b.Property<long>("FaturaId");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Obs")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Servico")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("PedidoIdPk");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.PedidoOculos", b =>
                {
                    b.Property<long>("PedidoId");

                    b.Property<long>("OculosId");

                    b.Property<long>("Id");

                    b.HasKey("PedidoId", "OculosId")
                        .HasName("PK_Pedido_Oculos");

                    b.HasIndex("OculosId");

                    b.ToTable("PedidoOculos");
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Contato", b =>
                {
                    b.HasOne("PSO.BackEnd.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Contatos")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_Cliente_Contato")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("PSO.BackEnd.Domain.Entities.Cliente", "Cliente")
                        .WithOne("Endereco")
                        .HasForeignKey("PSO.BackEnd.Domain.Entities.Endereco", "ClienteId")
                        .HasConstraintName("FK_Cliente_Endereco")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Fatura", b =>
                {
                    b.HasOne("PSO.BackEnd.Domain.Entities.Pedido", "Pedido")
                        .WithOne("Fatura")
                        .HasForeignKey("PSO.BackEnd.Domain.Entities.Fatura", "PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Lente", b =>
                {
                    b.HasOne("PSO.BackEnd.Domain.Entities.Oculos", "Oculos")
                        .WithMany("Lentes")
                        .HasForeignKey("OculosId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Parcela", b =>
                {
                    b.HasOne("PSO.BackEnd.Domain.Entities.Fatura", "Fatura")
                        .WithMany("Parcelas")
                        .HasForeignKey("FaturaId")
                        .HasConstraintName("FK_Fatura_Parcela")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("PSO.BackEnd.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_Cliente_Pedido")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PSO.BackEnd.Domain.Entities.PedidoOculos", b =>
                {
                    b.HasOne("PSO.BackEnd.Domain.Entities.Oculos", "Oculos")
                        .WithMany("PedidosOculos")
                        .HasForeignKey("OculosId")
                        .HasConstraintName("FK_Oculos")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PSO.BackEnd.Domain.Entities.Pedido", "Pedido")
                        .WithMany("PedidosOculos")
                        .HasForeignKey("PedidoId")
                        .HasConstraintName("FK_Pedido")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
